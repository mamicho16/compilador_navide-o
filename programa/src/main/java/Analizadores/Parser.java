
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import Programa.HTMLTable;
import java_cup.runtime.*;
import java.util.*;
import Analizadores.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\127\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\005\006\000\002\006\005\000\002\007" +
    "\003\000\002\007\003\000\002\007\005\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\004\000\002\010\004\000\002\011\005" +
    "\000\002\011\005\000\002\011\005\000\002\011\005\000" +
    "\002\011\005\000\002\011\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\004\000\002\013\005\000\002\013" +
    "\007\000\002\013\005\000\002\013\010\000\002\013\012" +
    "\000\002\013\005\000\002\014\003\000\002\014\005\000" +
    "\002\015\004\000\002\016\003\000\002\016\005\000\002" +
    "\017\003\000\002\017\004\000\002\020\004\000\002\020" +
    "\004\000\002\021\007\000\002\021\010\000\002\022\007" +
    "\000\002\022\010\000\002\023\005\000\002\023\006\000" +
    "\002\023\005\000\002\023\006\000\002\023\006\000\002" +
    "\023\005\000\002\023\006\000\002\024\014\000\002\025" +
    "\010\000\002\026\007\000\002\026\010\000\002\026\011" +
    "\000\002\027\007\000\002\027\010\000\002\030\004\000" +
    "\002\031\005\000\002\031\004\000\002\032\003\000\002" +
    "\032\004\000\002\033\004\000\002\033\004\000\002\033" +
    "\004\000\002\033\004\000\002\033\004\000\002\033\004" +
    "\000\002\033\004\000\002\034\003\000\002\034\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\264\000\014\027\014\030\013\031\011\032\016\033" +
    "\010\001\002\000\004\046\042\001\002\000\004\046\042" +
    "\001\002\000\016\002\000\027\014\030\013\031\011\032" +
    "\016\033\010\001\002\000\004\002\037\001\002\000\006" +
    "\025\ufffb\026\ufffb\001\002\000\006\025\ufffd\026\ufffd\001" +
    "\002\000\016\002\uffce\027\uffce\030\uffce\031\uffce\032\uffce" +
    "\033\uffce\001\002\000\006\025\ufffe\026\ufffe\001\002\000" +
    "\006\025\uffff\026\uffff\001\002\000\004\026\017\001\002" +
    "\000\006\025\ufffc\026\ufffc\001\002\000\006\025\021\065" +
    "\020\001\002\000\004\042\033\001\002\000\004\042\022" +
    "\001\002\000\016\027\014\030\013\031\011\032\016\033" +
    "\010\043\023\001\002\000\004\046\uffc8\001\002\000\004" +
    "\043\032\001\002\000\006\043\uffd0\064\030\001\002\000" +
    "\004\025\027\001\002\000\006\043\uffd1\064\uffd1\001\002" +
    "\000\014\027\014\030\013\031\011\032\016\033\010\001" +
    "\002\000\004\043\uffcf\001\002\000\004\046\uffc7\001\002" +
    "\000\016\027\014\030\013\031\011\032\016\033\010\043" +
    "\035\001\002\000\004\043\036\001\002\000\004\046\uffca" +
    "\001\002\000\004\046\uffc9\001\002\000\004\002\001\001" +
    "\002\000\016\002\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd" +
    "\033\uffcd\001\002\000\016\002\uffcc\027\uffcc\030\uffcc\031" +
    "\uffcc\032\uffcc\033\uffcc\001\002\000\054\012\053\013\061" +
    "\024\057\025\044\034\055\035\066\036\056\037\064\040" +
    "\051\041\046\042\054\047\100\050\102\053\043\054\103" +
    "\056\073\057\075\060\070\061\101\065\067\067\076\001" +
    "\002\000\004\042\253\001\002\000\046\004\ufff1\005\ufff1" +
    "\006\ufff1\007\ufff1\010\ufff1\011\ufff1\014\ufff1\015\ufff1\016" +
    "\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\042\152" +
    "\044\151\062\ufff1\063\251\001\002\000\004\062\250\001" +
    "\002\000\050\004\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5" +
    "\011\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\021" +
    "\ufff5\022\ufff5\023\ufff5\043\ufff5\045\ufff5\047\ufff5\062\ufff5" +
    "\064\ufff5\001\002\000\004\062\247\001\002\000\042\004" +
    "\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\014\uffeb" +
    "\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023" +
    "\uffeb\062\uffeb\063\245\001\002\000\050\004\ufff6\005\ufff6" +
    "\006\ufff6\007\ufff6\010\ufff6\011\ufff6\014\ufff6\015\ufff6\016" +
    "\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6\023\ufff6\043\ufff6" +
    "\045\ufff6\047\ufff6\062\ufff6\064\ufff6\001\002\000\004\062" +
    "\244\001\002\000\004\025\243\001\002\000\036\012\053" +
    "\013\061\024\057\025\111\034\055\035\066\036\056\037" +
    "\064\040\051\041\046\042\054\060\070\061\101\065\067" +
    "\001\002\000\050\004\ufffa\005\ufffa\006\ufffa\007\ufffa\010" +
    "\ufffa\011\ufffa\014\ufffa\015\ufffa\016\ufffa\017\ufffa\020\ufffa" +
    "\021\ufffa\022\ufffa\023\ufffa\043\ufffa\045\ufffa\047\ufffa\062" +
    "\ufffa\064\ufffa\001\002\000\050\004\ufff8\005\ufff8\006\ufff8" +
    "\007\ufff8\010\ufff8\011\ufff8\014\ufff8\015\ufff8\016\ufff8\017" +
    "\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8\043\ufff8\045\ufff8" +
    "\047\ufff8\062\ufff8\064\ufff8\001\002\000\036\012\053\013" +
    "\061\024\057\025\111\034\055\035\066\036\056\037\064" +
    "\040\051\041\046\042\054\060\070\061\101\065\067\001" +
    "\002\000\050\004\uffef\005\uffef\006\uffef\007\uffef\010\uffef" +
    "\011\uffef\014\uffef\015\uffef\016\uffef\017\uffef\020\uffef\021" +
    "\uffef\022\uffef\023\uffef\043\uffef\045\uffef\047\uffef\062\uffef" +
    "\064\uffef\001\002\000\004\025\237\001\002\000\050\004" +
    "\uffec\005\uffec\006\uffec\007\uffec\010\uffec\011\uffec\014\uffec" +
    "\015\uffec\016\uffec\017\uffec\020\uffec\021\uffec\022\uffec\023" +
    "\uffec\043\uffec\045\uffec\047\uffec\062\uffec\064\uffec\001\002" +
    "\000\004\062\236\001\002\000\050\004\ufff7\005\ufff7\006" +
    "\ufff7\007\ufff7\010\ufff7\011\ufff7\014\ufff7\015\ufff7\016\ufff7" +
    "\017\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7\043\ufff7\045" +
    "\ufff7\047\ufff7\062\ufff7\064\ufff7\001\002\000\040\004\114" +
    "\005\131\006\125\007\123\010\126\011\120\014\124\015" +
    "\130\016\121\017\122\020\117\021\116\022\115\023\132" +
    "\062\235\001\002\000\050\004\ufff9\005\ufff9\006\ufff9\007" +
    "\ufff9\010\ufff9\011\ufff9\014\ufff9\015\ufff9\016\ufff9\017\ufff9" +
    "\020\ufff9\021\ufff9\022\ufff9\023\ufff9\043\ufff9\045\ufff9\047" +
    "\ufff9\062\ufff9\064\ufff9\001\002\000\004\042\231\001\002" +
    "\000\004\042\226\001\002\000\004\062\225\001\002\000" +
    "\050\004\uffed\005\uffed\006\uffed\007\uffed\010\uffed\011\uffed" +
    "\014\uffed\015\uffed\016\uffed\017\uffed\020\uffed\021\uffed\022" +
    "\uffed\023\uffed\043\uffed\045\uffed\047\uffed\062\uffed\064\uffed" +
    "\001\002\000\040\012\053\013\061\024\057\025\111\034" +
    "\055\035\066\036\056\037\064\040\051\041\046\042\054" +
    "\060\070\061\101\062\uffac\065\067\001\002\000\054\012" +
    "\053\013\061\024\057\025\044\034\055\035\066\036\056" +
    "\037\064\040\051\041\046\042\054\047\222\050\102\053" +
    "\043\054\103\056\073\057\075\060\070\061\101\065\067" +
    "\067\076\001\002\000\004\062\221\001\002\000\014\027" +
    "\014\030\013\031\011\032\016\033\010\001\002\000\050" +
    "\004\uffee\005\uffee\006\uffee\007\uffee\010\uffee\011\uffee\014" +
    "\uffee\015\uffee\016\uffee\017\uffee\020\uffee\021\uffee\022\uffee" +
    "\023\uffee\043\uffee\045\uffee\047\uffee\062\uffee\064\uffee\001" +
    "\002\000\026\002\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6" +
    "\033\uffb6\051\uffb6\052\uffb6\055\uffb6\062\uffb6\001\002\000" +
    "\004\042\201\001\002\000\004\042\163\001\002\000\004" +
    "\046\042\001\002\000\054\012\uffb5\013\uffb5\024\uffb5\025" +
    "\uffb5\034\uffb5\035\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5" +
    "\042\uffb5\047\uffb5\050\uffb5\053\uffb5\054\uffb5\056\uffb5\057" +
    "\uffb5\060\uffb5\061\uffb5\065\uffb5\067\uffb5\001\002\000\050" +
    "\004\ufff2\005\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\014" +
    "\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2" +
    "\023\ufff2\043\ufff2\045\ufff2\047\ufff2\062\ufff2\064\ufff2\001" +
    "\002\000\004\055\107\001\002\000\004\042\110\001\002" +
    "\000\036\012\053\013\061\024\057\025\111\034\055\035" +
    "\066\036\056\037\064\040\051\041\046\042\054\060\070" +
    "\061\101\065\067\001\002\000\054\004\ufff1\005\ufff1\006" +
    "\ufff1\007\ufff1\010\ufff1\011\ufff1\014\ufff1\015\ufff1\016\ufff1" +
    "\017\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\042\152\043" +
    "\ufff1\044\151\045\ufff1\047\ufff1\062\ufff1\064\ufff1\001\002" +
    "\000\050\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011" +
    "\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb" +
    "\022\uffeb\023\uffeb\043\uffeb\045\uffeb\047\uffeb\062\uffeb\064" +
    "\uffeb\001\002\000\040\004\114\005\131\006\125\007\123" +
    "\010\126\011\120\014\124\015\130\016\121\017\122\020" +
    "\117\021\116\022\115\023\132\043\127\001\002\000\036" +
    "\012\053\013\061\024\057\025\111\034\055\035\066\036" +
    "\056\037\064\040\051\041\046\042\054\060\070\061\101" +
    "\065\067\001\002\000\036\012\053\013\061\024\057\025" +
    "\111\034\055\035\066\036\056\037\064\040\051\041\046" +
    "\042\054\060\070\061\101\065\067\001\002\000\036\012" +
    "\053\013\061\024\057\025\111\034\055\035\066\036\056" +
    "\037\064\040\051\041\046\042\054\060\070\061\101\065" +
    "\067\001\002\000\036\012\053\013\061\024\057\025\111" +
    "\034\055\035\066\036\056\037\064\040\051\041\046\042" +
    "\054\060\070\061\101\065\067\001\002\000\036\012\053" +
    "\013\061\024\057\025\111\034\055\035\066\036\056\037" +
    "\064\040\051\041\046\042\054\060\070\061\101\065\067" +
    "\001\002\000\036\012\053\013\061\024\057\025\111\034" +
    "\055\035\066\036\056\037\064\040\051\041\046\042\054" +
    "\060\070\061\101\065\067\001\002\000\036\012\053\013" +
    "\061\024\057\025\111\034\055\035\066\036\056\037\064" +
    "\040\051\041\046\042\054\060\070\061\101\065\067\001" +
    "\002\000\036\012\053\013\061\024\057\025\111\034\055" +
    "\035\066\036\056\037\064\040\051\041\046\042\054\060" +
    "\070\061\101\065\067\001\002\000\036\012\053\013\061" +
    "\024\057\025\111\034\055\035\066\036\056\037\064\040" +
    "\051\041\046\042\054\060\070\061\101\065\067\001\002" +
    "\000\036\012\053\013\061\024\057\025\111\034\055\035" +
    "\066\036\056\037\064\040\051\041\046\042\054\060\070" +
    "\061\101\065\067\001\002\000\036\012\053\013\061\024" +
    "\057\025\111\034\055\035\066\036\056\037\064\040\051" +
    "\041\046\042\054\060\070\061\101\065\067\001\002\000" +
    "\004\062\uffbe\001\002\000\036\012\053\013\061\024\057" +
    "\025\111\034\055\035\066\036\056\037\064\040\051\041" +
    "\046\042\054\060\070\061\101\065\067\001\002\000\036" +
    "\012\053\013\061\024\057\025\111\034\055\035\066\036" +
    "\056\037\064\040\051\041\046\042\054\060\070\061\101" +
    "\065\067\001\002\000\036\012\053\013\061\024\057\025" +
    "\111\034\055\035\066\036\056\037\064\040\051\041\046" +
    "\042\054\060\070\061\101\065\067\001\002\000\050\004" +
    "\uffdb\005\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb\014\uffdb" +
    "\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023" +
    "\uffdb\043\uffdb\045\uffdb\047\uffdb\062\uffdb\064\uffdb\001\002" +
    "\000\050\004\uffe9\005\uffe9\006\125\007\123\010\126\011" +
    "\120\014\124\015\130\016\121\017\122\020\117\021\116" +
    "\022\115\023\132\043\uffe9\045\uffe9\047\uffe9\062\uffe9\064" +
    "\uffe9\001\002\000\050\004\uffe1\005\uffe1\006\uffe1\007\uffe1" +
    "\010\uffe1\011\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020" +
    "\uffe1\021\uffe1\022\115\023\132\043\uffe1\045\uffe1\047\uffe1" +
    "\062\uffe1\064\uffe1\001\002\000\050\004\uffe6\005\uffe6\006" +
    "\uffe6\007\uffe6\010\uffe6\011\uffe6\014\124\015\130\016\121" +
    "\017\122\020\117\021\116\022\115\023\132\043\uffe6\045" +
    "\uffe6\047\uffe6\062\uffe6\064\uffe6\001\002\000\050\004\uffe8" +
    "\005\uffe8\006\uffe8\007\uffe8\010\126\011\120\014\124\015" +
    "\130\016\121\017\122\020\117\021\116\022\115\023\132" +
    "\043\uffe8\045\uffe8\047\uffe8\062\uffe8\064\uffe8\001\002\000" +
    "\050\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2" +
    "\014\uffe2\015\130\016\uffe2\017\uffe2\020\uffe2\021\116\022" +
    "\115\023\132\043\uffe2\045\uffe2\047\uffe2\062\uffe2\064\uffe2" +
    "\001\002\000\050\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010" +
    "\126\011\120\014\124\015\130\016\121\017\122\020\117" +
    "\021\116\022\115\023\132\043\uffe7\045\uffe7\047\uffe7\062" +
    "\uffe7\064\uffe7\001\002\000\050\004\uffdf\005\uffdf\006\uffdf" +
    "\007\uffdf\010\uffdf\011\uffdf\014\uffdf\015\130\016\uffdf\017" +
    "\uffdf\020\uffdf\021\116\022\115\023\132\043\uffdf\045\uffdf" +
    "\047\uffdf\062\uffdf\064\uffdf\001\002\000\050\004\uffe0\005" +
    "\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0\014\uffe0\015\130" +
    "\016\uffe0\017\uffe0\020\uffe0\021\116\022\115\023\132\043" +
    "\uffe0\045\uffe0\047\uffe0\062\uffe0\064\uffe0\001\002\000\050" +
    "\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5\014" +
    "\124\015\130\016\121\017\122\020\117\021\116\022\115" +
    "\023\132\043\uffe5\045\uffe5\047\uffe5\062\uffe5\064\uffe5\001" +
    "\002\000\050\004\uffde\005\uffde\006\uffde\007\uffde\010\uffde" +
    "\011\uffde\014\uffde\015\130\016\uffde\017\uffde\020\uffde\021" +
    "\116\022\115\023\132\043\uffde\045\uffde\047\uffde\062\uffde" +
    "\064\uffde\001\002\000\050\004\uffdd\005\uffdd\006\uffdd\007" +
    "\uffdd\010\uffdd\011\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd" +
    "\020\uffdd\021\uffdd\022\115\023\132\043\uffdd\045\uffdd\047" +
    "\uffdd\062\uffdd\064\uffdd\001\002\000\050\004\uffdc\005\uffdc" +
    "\006\uffdc\007\uffdc\010\uffdc\011\uffdc\014\uffdc\015\uffdc\016" +
    "\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\132\043\uffdc" +
    "\045\uffdc\047\uffdc\062\uffdc\064\uffdc\001\002\000\050\004" +
    "\uffea\005\uffea\006\125\007\123\010\126\011\120\014\124" +
    "\015\130\016\121\017\122\020\117\021\116\022\115\023" +
    "\132\043\uffea\045\uffea\047\uffea\062\uffea\064\uffea\001\002" +
    "\000\036\012\053\013\061\024\057\025\111\034\055\035" +
    "\066\036\056\037\064\040\051\041\046\042\054\060\070" +
    "\061\101\065\067\001\002\000\040\012\053\013\061\024" +
    "\057\025\111\034\055\035\066\036\056\037\064\040\051" +
    "\041\046\042\054\043\153\060\070\061\101\065\067\001" +
    "\002\000\050\004\uffc4\005\uffc4\006\uffc4\007\uffc4\010\uffc4" +
    "\011\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021" +
    "\uffc4\022\uffc4\023\uffc4\043\uffc4\045\uffc4\047\uffc4\062\uffc4" +
    "\064\uffc4\001\002\000\044\004\114\005\131\006\125\007" +
    "\123\010\126\011\120\014\124\015\130\016\121\017\122" +
    "\020\117\021\116\022\115\023\132\043\uffd3\047\uffd3\064" +
    "\uffd3\001\002\000\006\043\157\064\156\001\002\000\036" +
    "\012\053\013\061\024\057\025\111\034\055\035\066\036" +
    "\056\037\064\040\051\041\046\042\054\060\070\061\101" +
    "\065\067\001\002\000\050\004\uffc3\005\uffc3\006\uffc3\007" +
    "\uffc3\010\uffc3\011\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3" +
    "\020\uffc3\021\uffc3\022\uffc3\023\uffc3\043\uffc3\045\uffc3\047" +
    "\uffc3\062\uffc3\064\uffc3\001\002\000\044\004\114\005\131" +
    "\006\125\007\123\010\126\011\120\014\124\015\130\016" +
    "\121\017\122\020\117\021\116\022\115\023\132\043\uffd2" +
    "\047\uffd2\064\uffd2\001\002\000\040\004\114\005\131\006" +
    "\125\007\123\010\126\011\120\014\124\015\130\016\121" +
    "\017\122\020\117\021\116\022\115\023\132\045\162\001" +
    "\002\000\052\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4" +
    "\011\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4\021" +
    "\ufff4\022\ufff4\023\ufff4\043\ufff4\045\ufff4\047\ufff4\062\ufff4" +
    "\063\ufff4\064\ufff4\001\002\000\036\012\053\013\061\024" +
    "\057\025\111\034\055\035\066\036\056\037\064\040\051" +
    "\041\046\042\054\060\070\061\101\065\067\001\002\000" +
    "\040\004\114\005\131\006\125\007\123\010\126\011\120" +
    "\014\124\015\130\016\121\017\122\020\117\021\116\022" +
    "\115\023\132\043\165\001\002\000\004\046\042\001\002" +
    "\000\006\051\170\062\uffbd\001\002\000\006\052\177\062" +
    "\uffbc\001\002\000\004\042\171\001\002\000\036\012\053" +
    "\013\061\024\057\025\111\034\055\035\066\036\056\037" +
    "\064\040\051\041\046\042\054\060\070\061\101\065\067" +
    "\001\002\000\040\004\114\005\131\006\125\007\123\010" +
    "\126\011\120\014\124\015\130\016\121\017\122\020\117" +
    "\021\116\022\115\023\132\043\173\001\002\000\004\046" +
    "\042\001\002\000\010\051\170\052\uffba\062\uffba\001\002" +
    "\000\006\052\uffb9\062\uffb9\001\002\000\004\062\uffbb\001" +
    "\002\000\004\046\042\001\002\000\004\062\uffb8\001\002" +
    "\000\040\012\053\013\061\024\057\025\111\034\055\035" +
    "\066\036\056\037\064\040\051\041\046\042\054\043\202" +
    "\060\070\061\101\065\067\001\002\000\050\004\uffc1\005" +
    "\uffc1\006\uffc1\007\uffc1\010\uffc1\011\uffc1\014\uffc1\015\uffc1" +
    "\016\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\043" +
    "\uffc1\045\uffc1\047\uffc1\062\uffc1\064\uffc1\001\002\000\040" +
    "\004\114\005\131\006\125\007\123\010\126\011\120\014" +
    "\124\015\130\016\121\017\122\020\117\021\116\022\115" +
    "\023\132\043\204\001\002\000\050\004\uffc0\005\uffc0\006" +
    "\uffc0\007\uffc0\010\uffc0\011\uffc0\014\uffc0\015\uffc0\016\uffc0" +
    "\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\043\uffc0\045" +
    "\uffc0\047\uffc0\062\uffc0\064\uffc0\001\002\000\004\025\206" +
    "\001\002\000\010\044\207\062\uffd9\063\210\001\002\000" +
    "\004\036\212\001\002\000\036\012\053\013\061\024\057" +
    "\025\111\034\055\035\066\036\056\037\064\040\051\041" +
    "\046\042\054\060\070\061\101\065\067\001\002\000\040" +
    "\004\114\005\131\006\125\007\123\010\126\011\120\014" +
    "\124\015\130\016\121\017\122\020\117\021\116\022\115" +
    "\023\132\062\uffd8\001\002\000\004\045\213\001\002\000" +
    "\006\062\uffd6\063\214\001\002\000\004\046\215\001\002" +
    "\000\036\012\053\013\061\024\057\025\111\034\055\035" +
    "\066\036\056\037\064\040\051\041\046\042\054\060\070" +
    "\061\101\065\067\001\002\000\004\062\uffd5\001\002\000" +
    "\006\047\220\064\156\001\002\000\004\062\ufff3\001\002" +
    "\000\054\012\uffb0\013\uffb0\024\uffb0\025\uffb0\034\uffb0\035" +
    "\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\047\uffb0" +
    "\050\uffb0\053\uffb0\054\uffb0\056\uffb0\057\uffb0\060\uffb0\061" +
    "\uffb0\065\uffb0\067\uffb0\001\002\000\026\002\uffb7\027\uffb7" +
    "\030\uffb7\031\uffb7\032\uffb7\033\uffb7\051\uffb7\052\uffb7\055" +
    "\uffb7\062\uffb7\001\002\000\054\012\uffb4\013\uffb4\024\uffb4" +
    "\025\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4\040\uffb4\041" +
    "\uffb4\042\uffb4\047\uffb4\050\uffb4\053\uffb4\054\uffb4\056\uffb4" +
    "\057\uffb4\060\uffb4\061\uffb4\065\uffb4\067\uffb4\001\002\000" +
    "\040\004\114\005\131\006\125\007\123\010\126\011\120" +
    "\014\124\015\130\016\121\017\122\020\117\021\116\022" +
    "\115\023\132\062\uffab\001\002\000\054\012\uffae\013\uffae" +
    "\024\uffae\025\uffae\034\uffae\035\uffae\036\uffae\037\uffae\040" +
    "\uffae\041\uffae\042\uffae\047\uffae\050\uffae\053\uffae\054\uffae" +
    "\056\uffae\057\uffae\060\uffae\061\uffae\065\uffae\067\uffae\001" +
    "\002\000\036\012\053\013\061\024\057\025\111\034\055" +
    "\035\066\036\056\037\064\040\051\041\046\042\054\060" +
    "\070\061\101\065\067\001\002\000\006\043\230\064\156" +
    "\001\002\000\050\004\uffc2\005\uffc2\006\uffc2\007\uffc2\010" +
    "\uffc2\011\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2" +
    "\021\uffc2\022\uffc2\023\uffc2\043\uffc2\045\uffc2\047\uffc2\062" +
    "\uffc2\064\uffc2\001\002\000\040\012\053\013\061\024\057" +
    "\025\111\034\055\035\066\036\056\037\064\040\051\041" +
    "\046\042\054\043\232\060\070\061\101\065\067\001\002" +
    "\000\050\004\uffc6\005\uffc6\006\uffc6\007\uffc6\010\uffc6\011" +
    "\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6" +
    "\022\uffc6\023\uffc6\043\uffc6\045\uffc6\047\uffc6\062\uffc6\064" +
    "\uffc6\001\002\000\006\043\234\064\156\001\002\000\050" +
    "\004\uffc5\005\uffc5\006\uffc5\007\uffc5\010\uffc5\011\uffc5\014" +
    "\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5" +
    "\023\uffc5\043\uffc5\045\uffc5\047\uffc5\062\uffc5\064\uffc5\001" +
    "\002\000\054\012\uffb2\013\uffb2\024\uffb2\025\uffb2\034\uffb2" +
    "\035\uffb2\036\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2\047" +
    "\uffb2\050\uffb2\053\uffb2\054\uffb2\056\uffb2\057\uffb2\060\uffb2" +
    "\061\uffb2\065\uffb2\067\uffb2\001\002\000\054\012\uffaf\013" +
    "\uffaf\024\uffaf\025\uffaf\034\uffaf\035\uffaf\036\uffaf\037\uffaf" +
    "\040\uffaf\041\uffaf\042\uffaf\047\uffaf\050\uffaf\053\uffaf\054" +
    "\uffaf\056\uffaf\057\uffaf\060\uffaf\061\uffaf\065\uffaf\067\uffaf" +
    "\001\002\000\050\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010" +
    "\uffe3\011\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3" +
    "\021\uffe3\022\uffe3\023\uffe3\043\uffe3\045\uffe3\047\uffe3\062" +
    "\uffe3\064\uffe3\001\002\000\050\004\uffda\005\uffda\006\uffda" +
    "\007\uffda\010\uffda\011\uffda\014\uffda\015\uffda\016\uffda\017" +
    "\uffda\020\uffda\021\uffda\022\uffda\023\uffda\043\uffda\045\uffda" +
    "\047\uffda\062\uffda\064\uffda\001\002\000\040\004\114\005" +
    "\131\006\125\007\123\010\126\011\120\014\124\015\130" +
    "\016\121\017\122\020\117\021\116\022\115\023\132\043" +
    "\242\001\002\000\050\004\ufff0\005\ufff0\006\ufff0\007\ufff0" +
    "\010\ufff0\011\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\020" +
    "\ufff0\021\ufff0\022\ufff0\023\ufff0\043\ufff0\045\ufff0\047\ufff0" +
    "\062\ufff0\064\ufff0\001\002\000\050\004\uffe4\005\uffe4\006" +
    "\uffe4\007\uffe4\010\uffe4\011\uffe4\014\uffe4\015\uffe4\016\uffe4" +
    "\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\043\uffe4\045" +
    "\uffe4\047\uffe4\062\uffe4\064\uffe4\001\002\000\054\012\uffb3" +
    "\013\uffb3\024\uffb3\025\uffb3\034\uffb3\035\uffb3\036\uffb3\037" +
    "\uffb3\040\uffb3\041\uffb3\042\uffb3\047\uffb3\050\uffb3\053\uffb3" +
    "\054\uffb3\056\uffb3\057\uffb3\060\uffb3\061\uffb3\065\uffb3\067" +
    "\uffb3\001\002\000\036\012\053\013\061\024\057\025\111" +
    "\034\055\035\066\036\056\037\064\040\051\041\046\042" +
    "\054\060\070\061\101\065\067\001\002\000\040\004\114" +
    "\005\131\006\125\007\123\010\126\011\120\014\124\015" +
    "\130\016\121\017\122\020\117\021\116\022\115\023\132" +
    "\062\uffd4\001\002\000\054\012\uffad\013\uffad\024\uffad\025" +
    "\uffad\034\uffad\035\uffad\036\uffad\037\uffad\040\uffad\041\uffad" +
    "\042\uffad\047\uffad\050\uffad\053\uffad\054\uffad\056\uffad\057" +
    "\uffad\060\uffad\061\uffad\065\uffad\067\uffad\001\002\000\054" +
    "\012\uffb1\013\uffb1\024\uffb1\025\uffb1\034\uffb1\035\uffb1\036" +
    "\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1\047\uffb1\050\uffb1" +
    "\053\uffb1\054\uffb1\056\uffb1\057\uffb1\060\uffb1\061\uffb1\065" +
    "\uffb1\067\uffb1\001\002\000\036\012\053\013\061\024\057" +
    "\025\111\034\055\035\066\036\056\037\064\040\051\041" +
    "\046\042\054\060\070\061\101\065\067\001\002\000\040" +
    "\004\114\005\131\006\125\007\123\010\126\011\120\014" +
    "\124\015\130\016\121\017\122\020\117\021\116\022\115" +
    "\023\132\062\uffd7\001\002\000\006\025\256\067\076\001" +
    "\002\000\004\062\257\001\002\000\004\063\245\001\002" +
    "\000\006\044\151\063\251\001\002\000\036\012\053\013" +
    "\061\024\057\025\111\034\055\035\066\036\056\037\064" +
    "\040\051\041\046\042\054\060\070\061\101\065\067\001" +
    "\002\000\040\004\114\005\131\006\125\007\123\010\126" +
    "\011\120\014\124\015\130\016\121\017\122\020\117\021" +
    "\116\022\115\023\132\062\261\001\002\000\036\012\053" +
    "\013\061\024\057\025\111\034\055\035\066\036\056\037" +
    "\064\040\051\041\046\042\054\060\070\061\101\065\067" +
    "\001\002\000\040\004\114\005\131\006\125\007\123\010" +
    "\126\011\120\014\124\015\130\016\121\017\122\020\117" +
    "\021\116\022\115\023\132\062\263\001\002\000\004\043" +
    "\264\001\002\000\004\046\042\001\002\000\004\062\uffbf" +
    "\001\002\000\016\002\uffcb\027\uffcb\030\uffcb\031\uffcb\032" +
    "\uffcb\033\uffcb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\264\000\016\002\006\003\014\017\005\020\011\021" +
    "\004\022\003\001\001\000\004\031\265\001\001\000\004" +
    "\031\040\001\001\000\012\003\014\020\037\021\004\022" +
    "\003\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\025\015" +
    "\024\016\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\025\015\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\003\025\015\024\016\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\004" +
    "\104\005\047\007\064\010\076\011\071\012\057\013\051" +
    "\023\061\024\046\025\070\026\062\032\073\033\103\034" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\004\104\005\111\007\240\010\076\011\071\012" +
    "\057\023\061\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\004\104\005\111\007\237\010\076\011\071\012" +
    "\057\023\061\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\004" +
    "\104\005\111\007\223\010\076\011\071\012\057\023\061" +
    "\001\001\000\034\004\104\005\047\007\064\010\076\011" +
    "\071\012\057\013\051\023\061\024\046\025\070\026\062" +
    "\033\222\034\044\001\001\000\002\001\001\000\004\003" +
    "\204\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\031\105\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\004\104\005\111\007\112\010\076\011" +
    "\071\012\057\023\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\004\104\005\111\007" +
    "\147\010\076\011\071\012\057\023\061\001\001\000\020" +
    "\004\104\005\111\007\146\010\076\011\071\012\057\023" +
    "\061\001\001\000\020\004\104\005\111\007\145\010\076" +
    "\011\071\012\057\023\061\001\001\000\020\004\104\005" +
    "\111\007\144\010\076\011\071\012\057\023\061\001\001" +
    "\000\020\004\104\005\111\007\143\010\076\011\071\012" +
    "\057\023\061\001\001\000\020\004\104\005\111\007\142" +
    "\010\076\011\071\012\057\023\061\001\001\000\020\004" +
    "\104\005\111\007\141\010\076\011\071\012\057\023\061" +
    "\001\001\000\020\004\104\005\111\007\140\010\076\011" +
    "\071\012\057\023\061\001\001\000\020\004\104\005\111" +
    "\007\137\010\076\011\071\012\057\023\061\001\001\000" +
    "\020\004\104\005\111\007\136\010\076\011\071\012\057" +
    "\023\061\001\001\000\020\004\104\005\111\007\135\010" +
    "\076\011\071\012\057\023\061\001\001\000\002\001\001" +
    "\000\020\004\104\005\111\007\134\010\076\011\071\012" +
    "\057\023\061\001\001\000\020\004\104\005\111\007\133" +
    "\010\076\011\071\012\057\023\061\001\001\000\020\004" +
    "\104\005\111\007\132\010\076\011\071\012\057\023\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\004\104\005\111\007" +
    "\160\010\076\011\071\012\057\023\061\001\001\000\022" +
    "\004\104\005\111\007\153\010\076\011\071\012\057\014" +
    "\154\023\061\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\004\104\005\111\007\157\010" +
    "\076\011\071\012\057\023\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\004\104\005\111\007\163\010\076\011\071\012\057" +
    "\023\061\001\001\000\002\001\001\000\004\031\165\001" +
    "\001\000\004\027\166\001\001\000\004\030\175\001\001" +
    "\000\002\001\001\000\020\004\104\005\111\007\171\010" +
    "\076\011\071\012\057\023\061\001\001\000\002\001\001" +
    "\000\004\031\173\001\001\000\004\027\174\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\031\177\001\001" +
    "\000\002\001\001\000\020\004\104\005\111\007\202\010" +
    "\076\011\071\012\057\023\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\004\104\005\111" +
    "\007\210\010\076\011\071\012\057\023\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\215\001\001\000\022\004\104\005\111\007\153\010" +
    "\076\011\071\012\057\014\216\023\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\004\104\005\111\007\153\010" +
    "\076\011\071\012\057\014\226\023\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\004\104\005\111\007" +
    "\153\010\076\011\071\012\057\014\232\023\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\004\104\005\111\007\245" +
    "\010\076\011\071\012\057\023\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\004\104" +
    "\005\111\007\251\010\076\011\071\012\057\023\061\001" +
    "\001\000\002\001\001\000\006\005\254\013\253\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\004\104\005\111\007\257\010\076\011\071\012\057" +
    "\023\061\001\001\000\002\001\001\000\020\004\104\005" +
    "\111\007\261\010\076\011\071\012\057\023\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\031\264\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
//  public java_cup.runtime.Symbol scan()
//    throws java.lang.Exception
//    {
// return lex.next_token(); 
//    }
//
//
//    Lexer lex;
//
//    public Parser(Lexer lex) {
//        this.lex=lex;
//        this.symbolFactory = new DefaultSymbolFactory();
//    }
    
    @Override
    public void syntax_error(Symbol token) {
        if (token.value == null) {
            return;
        }
        System.out.println("Error de sintaxis en la linea " + token.left + " columna " + token.right + ": " + token.value);
        System.out.println("Continuando con el parsing");
    }
    
    @Override
    public void unrecovered_syntax_error(Symbol token) throws java.lang.Exception {
        throw new Exception("Error de sintaxis irrecuperable en la linea " + token.left + " columna " + token.right + ": " + token.value);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {



public void hola_mundo() {
    System.out.println("Hola Mundo");
}

HashMap<String, ArrayList<SymbolObject>> tablasSimbolos = new HashMap<String, ArrayList<SymbolObject>>();
String hash = "";
ArrayList<Funcion> funciones = new ArrayList<Funcion>();

ArrayList<ExpType> tipos_arit = new ArrayList<ExpType>();
ArrayList<ExpType> tipos_rel = new ArrayList<ExpType>();
ArrayList<ExpType> tipos_log = new ArrayList<ExpType>();
ArrayList<ExpType> tipos_u = new ArrayList<ExpType>();

public void cargarTiposOperaciones() {
    tipos_arit.add(ExpType.INT);
    tipos_arit.add(ExpType.FLOAT);
    tipos_rel.add(ExpType.INT);
    tipos_rel.add(ExpType.FLOAT);
    tipos_rel.add(ExpType.BOOL);
    tipos_log.add(ExpType.BOOL);
    tipos_u.add(ExpType.INT);
}


public ExpType validarExp(ExpType tipo1, ExpType tipo2, ArrayList<ExpType> tipos, String operador) {
    if(tipo1 != tipo2) {
//        System.out.println("Error semantico en la linea " + lex.getLine() + " columna " + lex.getColumn() + " los tipos de la expresion " + tipo1.toString() + " y " + tipo2.toString() + " no coinciden con el operador " + operador);
        return ExpType.ERROR;
    }
    if(!tipos.contains(tipo1)) {
//        System.out.println("Error semantico en la linea " + lex.getLine() + " columna " + lex.getColumn() + " los tipos de la expresion " + tipo1.toString() + " y " + tipo2.toString() + " no coinciden con el operador " + operador);
        return ExpType.ERROR;
    }
    return tipo1;
}

public ExpType validarExpU(ExpType tipo, String operador) {
    if(!tipos_u.contains(tipo)) {
//        System.out.println("Error semantico en la linea " + lex.getLine() + " columna " + lex.getColumn() + " el tipo de la expresion " + tipo.toString() + " no coincide con el operador " + operador);
        return ExpType.ERROR;
    }
    return tipo;
}


public void createSymbolTable() {
    ArrayList<String[]> rows = new ArrayList<String[]>();

    for (String key: tablasSimbolos.keySet()) {
        for (SymbolObject val: tablasSimbolos.get(key)) {
            String[] row = new String[]{key, val.getTipoEntrada(), val.getNombre(), val.getTipoDato()};
            rows.add(row);
        }
    }
    // Instancia la clase para crear la tabla de simbolos
    HTMLTable tableGenerator = new HTMLTable();
    // Crea la tabla con los resultados
    String table = tableGenerator.createSymTable(rows);
    // Escribe el archivo HTML
    String outputFile = "src/main/java/Programa/tablaSim.html";
    tableGenerator.createHTMLFile(table, outputFile);
    System.out.println("Tabla de Simbolos creada en: " + outputFile);

}

public void printSymbolTable() {
    
    for (String key: tablasSimbolos.keySet()) {
        System.out.println("Tabla de simbolos: " + key);
        System.out.println("Valores: ");
        for (SymbolObject val: tablasSimbolos.get(key)) {
            System.out.println(val.toString());
        }
    }
}


public void addHash(String newHash) {
    hash = newHash;
    tablasSimbolos.put(newHash, new ArrayList<SymbolObject>());

}
public void addSymbol(SymbolObject symbol) {
    tablasSimbolos.get(hash).add(symbol);
}

public Funcion buscarFuncion(String nombre) {
    for(Funcion funcion: funciones) {
        if(funcion.getNombre().equals(nombre)) {
            return funcion;
        }
    }
    return null;
} 

public Funcion funcionActual() {
    return funciones.get(funciones.size() - 1);
}

public ExpType getTipoVar(String nombre, boolean err){
    for(SymbolObject symbol: tablasSimbolos.get(hash)) {
        if(symbol.getNombre().equals(nombre)) {
            return Expresion.ExpType(symbol.getTipoDato());
        }
    }
    if(err) {
//        System.out.println("Error semantico en la linea " + lex.getLine() + " columna " + lex.getColumn() + " la variable " + nombre + " no ha sido declarada en el alcance actual");
    }
    return ExpType.ERROR;
}

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= navidad EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // navidad ::= funcion_bolsanavidena 
            {
              Object RESULT =null;
		 createSymbolTable();
                                     printSymbolTable();
                                     cargarTiposOperaciones();

                                     if(buscarFuncion("main") == null) {
                                        System.out.println("Error semantico: No se encontro la funcion main");
                                     }
                                     else {
                                        System.out.println("La funcion main fue encontrada");
                                     }

                                     for(Funcion funcion: funciones) {
                                        if(funcion.isRetornaAlgo() == false) {
                                            System.out.println("Error semantico: La funcion " + funcion.getNombre() + " no retorna algo valido");
                                        }
                                     }
                                   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("navidad",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // tipos_noel ::= int_noel 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = type; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos_noel",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // tipos_noel ::= float_nicolas 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = type; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos_noel",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // tipos_noel ::= bool_kringle 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = type; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos_noel",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // tipos_noel ::= string_sinterklaas 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = type; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos_noel",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // tipos_noel ::= char_pascuero 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = type; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos_noel",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // literales_noel ::= l_string_sinterklaas 
            {
              Object RESULT =null;
		int literalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int literalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object literal = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expresion(literal, ExpType.STRING); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literales_noel",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // literales_noel ::= l_char_pascuero 
            {
              Object RESULT =null;
		int literalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int literalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object literal = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expresion(literal, ExpType.CHAR); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literales_noel",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // literales_noel ::= l_int_noel 
            {
              Object RESULT =null;
		int literalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int literalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object literal = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expresion(literal, ExpType.INT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literales_noel",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // literales_noel ::= l_float_nicolas 
            {
              Object RESULT =null;
		int literalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int literalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object literal = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expresion(literal, ExpType.FLOAT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literales_noel",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // literales_noel ::= l_true_olentzero 
            {
              Object RESULT =null;
		int literalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int literalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object literal = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expresion(literal, ExpType.BOOL); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literales_noel",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // literales_noel ::= l_false_jesus 
            {
              Object RESULT =null;
		int literalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int literalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object literal = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expresion(literal, ExpType.BOOL); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literales_noel",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // array_lista_viajes ::= identificador_persona cuadrado_abre_empaque expresion_regalo cuadrado_cierra_empaque 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    Expresion a = (Expresion)exp;
    ExpType tipo = a.getTipo();
    ExpType tipoVar = getTipoVar(id.toString(), true);
    RESULT = new Expresion("null", ExpType.ERROR);
    if(tipo != ExpType.INT) {
//        System.out.println("Error semantico en la linea " + lex.getLine() + " columna " + lex.getColumn() + " el tipo de la expresion " + tipo.toString() + " no es valido");
    }
    else if(tipoVar != ExpType.INTLIST && tipoVar != ExpType.CHARLIST) {
//        System.out.println("Error semantico en la linea " + lex.getLine() + " columna " + lex.getColumn() + " la variable " + id.toString() + " no es un arreglo");
    }
    else {
        RESULT = new Expresion(id.toString() + "[" + a.getValor().toString() + "]", tipoVar);
    }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_lista_viajes",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // array_elementos_destinos ::= llave_abre_regalo argumento_rompope llave_cierra_regalo 
            {
              Object RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object arg = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    var temp = (ArrayList<Expresion>)arg;
    boolean flag = false;
    ExpType tipo = temp.get(0).getTipo();

    if(tipo != ExpType.INT && tipo != ExpType.CHAR) {
//        System.out.println("Error semantico en la linea " + lex.getLine() + " columna " + lex.getColumn() + " el tipo de la expresion " + tipo.toString() + " no es valido");
        RESULT = new Expresion("null", ExpType.ERROR);
        flag = true;
    }
    for(Expresion exp: temp) {
        if(exp.getTipo() != tipo) {
//            System.out.println("Error semantico en la linea " + lex.getLine() + " columna " + lex.getColumn() + " el tipo de la expresion " + exp.getTipo().toString() + " no coincide con el tipo del arreglo " + tipo.toString());
            RESULT = new Expresion("null", ExpType.ERROR);
            flag = true;
            break;  
        }
    }
    if(!flag) {
        if(tipo == ExpType.INT) {
            RESULT = new Expresion(temp, ExpType.INTLIST);
        }
        else {
            RESULT = new Expresion(temp, ExpType.CHARLIST);
        }
    }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_elementos_destinos",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expresion_regalo ::= literales_noel 
            {
              Object RESULT =null;
		int literalesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int literalesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object literales = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
    RESULT = literales; 
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion_regalo",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expresion_regalo ::= identificador_persona 
            {
              Object RESULT =null;
		int id_pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int id_pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id_p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
    if(getTipoVar(id_p.toString(), true) != ExpType.ERROR) {
        RESULT = new Expresion(id_p.toString(), getTipoVar(id_p.toString(), true));
    }
    else {
        RESULT = new Expresion(id_p.toString(), ExpType.ERROR);
    }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion_regalo",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expresion_regalo ::= redondo_abre_cuento expresion_regalo redondo_cierra_cuento 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
    RESULT = exp;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion_regalo",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expresion_regalo ::= logicas_regalomanual 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
    RESULT = exp;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion_regalo",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expresion_regalo ::= aritmeticas_regaloprin 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = exp;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion_regalo",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expresion_regalo ::= relacionales_regalocomprado 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = exp;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion_regalo",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expresion_regalo ::= llamada_funciones_nieve 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = exp;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion_regalo",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expresion_regalo ::= array_lista_viajes 
            {
              Object RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object arr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = arr;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion_regalo",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // aritmeticas_regaloprin ::= expresion_regalo suma_rudolph expresion_regalo 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Expresion a = (Expresion)exp1;
    Expresion b = (Expresion)exp2;
    ExpType res = validarExp(a.getTipo(), b.getTipo(), tipos_arit, "+");
    if(res != ExpType.ERROR) {
        RESULT = new Expresion(a.getValor().toString() + " + " + b.getValor().toString(), res);
    }
    else {
        RESULT = new Expresion("null", ExpType.ERROR);
    }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritmeticas_regaloprin",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // aritmeticas_regaloprin ::= expresion_regalo resta_dasher expresion_regalo 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Expresion a = (Expresion)exp1;
    Expresion b = (Expresion)exp2;
    ExpType res = validarExp(a.getTipo(), b.getTipo(), tipos_arit, "-");
    if(res != ExpType.ERROR) {
        RESULT = new Expresion(a.getValor().toString() + " - " + b.getValor().toString(), res);
    }
    else {
        RESULT = new Expresion("null", ExpType.ERROR);
    }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritmeticas_regaloprin",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // aritmeticas_regaloprin ::= expresion_regalo division_dancer expresion_regalo 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Expresion a = (Expresion)exp1;
    Expresion b = (Expresion)exp2;
    ExpType res = validarExp(a.getTipo(), b.getTipo(), tipos_arit, "/");
    if(res != ExpType.ERROR) {
        RESULT = new Expresion(a.getValor().toString() + " / " + b.getValor().toString(), res);
    }
    else {
        RESULT = new Expresion("null", ExpType.ERROR);
    }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritmeticas_regaloprin",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // aritmeticas_regaloprin ::= expresion_regalo multiplicacion_prancer expresion_regalo 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Expresion a = (Expresion)exp1;
    Expresion b = (Expresion)exp2;
    ExpType res = validarExp(a.getTipo(), b.getTipo(), tipos_arit, "*");
    if(res != ExpType.ERROR) {
        RESULT = new Expresion(a.getValor().toString() + " * " + b.getValor().toString(), res);
    }
    else {
        RESULT = new Expresion("null", ExpType.ERROR);
    }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritmeticas_regaloprin",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // aritmeticas_regaloprin ::= expresion_regalo modulo_vixen expresion_regalo 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Expresion a = (Expresion)exp1;
    Expresion b = (Expresion)exp2;
    ExpType res = validarExp(a.getTipo(), b.getTipo(), tipos_arit, "~");
    if(res != ExpType.ERROR) {
        RESULT = new Expresion(a.getValor().toString() + " ~ " + b.getValor().toString(), res);
    }
    else {
        RESULT = new Expresion("null", ExpType.ERROR);
    }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritmeticas_regaloprin",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // aritmeticas_regaloprin ::= expresion_regalo potencia_comet expresion_regalo 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Expresion a = (Expresion)exp1;
    Expresion b = (Expresion)exp2;
    ExpType res = validarExp(a.getTipo(), b.getTipo(), tipos_arit, "**");
    if(res != ExpType.ERROR) {
        RESULT = new Expresion(a.getValor().toString() + " ** " + b.getValor().toString(), res);
    }
    else {

        RESULT = new Expresion("null", ExpType.ERROR);
    }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritmeticas_regaloprin",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // aritmeticas_regaloprin ::= aumentar_quien identificador_persona 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    ExpType res = getTipoVar(id.toString(), false);
    ExpType res2 = validarExpU(res, "++");
    if(res != ExpType.ERROR) {
        RESULT = new Expresion("++" + id.toString(), res);
    }
    else {
//        System.out.println("Error semantico en la linea " + lex.getLine() + " columna " + lex.getColumn() + " la variable " + id.toString() + " no se puede aumentar");
        RESULT = new Expresion("null", ExpType.ERROR);
    }

    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritmeticas_regaloprin",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // aritmeticas_regaloprin ::= disminuir_grinch identificador_persona 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    ExpType res = getTipoVar(id.toString(), false);
    ExpType res2 = validarExpU(res, "--");
    if(res != ExpType.ERROR) {
        RESULT = new Expresion("--" + id.toString(), res);
    }
    else {
//        System.out.println("Error semantico en la linea " + lex.getLine() + " columna " + lex.getColumn() + " la variable " + id.toString() + " no se puede disminuir");
        RESULT = new Expresion("null", ExpType.ERROR);
    }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritmeticas_regaloprin",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // relacionales_regalocomprado ::= expresion_regalo igual_twinkle expresion_regalo 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Expresion a = (Expresion)exp1;
    Expresion b = (Expresion)exp2;
    ExpType res = validarExp(a.getTipo(), b.getTipo(), tipos_rel, "==");
    if(res != ExpType.ERROR) {
        RESULT = new Expresion(a.getValor().toString() + " == " + b.getValor().toString(), ExpType.BOOL);
    }
    else {
        RESULT = new Expresion("null", ExpType.ERROR);
    }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacionales_regalocomprado",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // relacionales_regalocomprado ::= expresion_regalo diferente_sparkle expresion_regalo 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Expresion a = (Expresion)exp1;
    Expresion b = (Expresion)exp2;
    ExpType res = validarExp(a.getTipo(), b.getTipo(), tipos_rel, "!=");
    if(res != ExpType.ERROR) {
        RESULT = new Expresion(a.getValor().toString() + " != " + b.getValor().toString(), ExpType.BOOL);
    }
    else {
        RESULT = new Expresion("null", ExpType.ERROR);
    }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacionales_regalocomprado",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // relacionales_regalocomprado ::= expresion_regalo mayor_jingle expresion_regalo 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Expresion a = (Expresion)exp1;
    Expresion b = (Expresion)exp2;
    ExpType res = validarExp(a.getTipo(), b.getTipo(), tipos_rel, ">");
    if(res != ExpType.ERROR) {
        RESULT = new Expresion(a.getValor().toString() + " > " + b.getValor().toString(), ExpType.BOOL);
    }
    else {
        RESULT = new Expresion("null", ExpType.ERROR);
    }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacionales_regalocomprado",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // relacionales_regalocomprado ::= expresion_regalo mayor_igual_blinky expresion_regalo 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Expresion a = (Expresion)exp1;
    Expresion b = (Expresion)exp2;
    ExpType res = validarExp(a.getTipo(), b.getTipo(), tipos_rel, ">=");
    if(res != ExpType.ERROR) {
        RESULT = new Expresion(a.getValor().toString() + " >= " + b.getValor().toString(), ExpType.BOOL);
    }
    else {
        RESULT = new Expresion("null", ExpType.ERROR);
    }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacionales_regalocomprado",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // relacionales_regalocomprado ::= expresion_regalo menor_fizz expresion_regalo 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Expresion a = (Expresion)exp1;
    Expresion b = (Expresion)exp2;
    ExpType res = validarExp(a.getTipo(), b.getTipo(), tipos_rel, "<");
    if(res != ExpType.ERROR) {
        RESULT = new Expresion(a.getValor().toString() + " < " + b.getValor().toString(), ExpType.BOOL);
    }
    else {
        RESULT = new Expresion("null", ExpType.ERROR);
    }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacionales_regalocomprado",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // relacionales_regalocomprado ::= expresion_regalo menor_igual_mistle expresion_regalo 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Expresion a = (Expresion)exp1;
    Expresion b = (Expresion)exp2;
    ExpType res = validarExp(a.getTipo(), b.getTipo(), tipos_rel, "=<");
    if(res != ExpType.ERROR) {
        RESULT = new Expresion(a.getValor().toString() + " =< " + b.getValor().toString(), ExpType.BOOL);
    }
    else {
        RESULT = new Expresion("null", ExpType.ERROR);
    }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacionales_regalocomprado",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // logicas_regalomanual ::= expresion_regalo and_melchor expresion_regalo 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Expresion a = (Expresion)exp1;
    Expresion b = (Expresion)exp2;
    ExpType res = validarExp(a.getTipo(), b.getTipo(), tipos_log, "^");
    if(res != ExpType.ERROR) {
        RESULT = new Expresion(a.getValor().toString() + " ^ " + b.getValor().toString(), ExpType.BOOL);
    }
    else {
        RESULT = new Expresion("null", ExpType.ERROR);
    }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logicas_regalomanual",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // logicas_regalomanual ::= expresion_regalo or_gaspar expresion_regalo 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Expresion a = (Expresion)exp1;
    Expresion b = (Expresion)exp2;
    ExpType res = validarExp(a.getTipo(), b.getTipo(), tipos_log, "#");
    if(res != ExpType.ERROR) {
        RESULT = new Expresion(a.getValor().toString() + " # " + b.getValor().toString(), ExpType.BOOL);
    }
    else {
        RESULT = new Expresion("null", ExpType.ERROR);
    }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logicas_regalomanual",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // logicas_regalomanual ::= not_baltasar expresion_regalo 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Expresion a = (Expresion)exp;
    ExpType res = validarExp(a.getTipo(), ExpType.BOOL, tipos_log, "!");
    if(res != ExpType.ERROR) {
        RESULT = new Expresion("!" + a.getValor().toString(), ExpType.BOOL);
    }
    else {
        RESULT = new Expresion("null", ExpType.ERROR);
    }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logicas_regalomanual",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // asig_galleta ::= local_arbol tipos_noel identificador_persona 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
    if(getTipoVar(id.toString(), false) != ExpType.ERROR) {
//        System.out.println("Error semantico en la linea " + lex.getLine() + " columna " + lex.getColumn() + " la variable " + id.toString() + " ya ha sido declarada");
    }
    
    else {
        SymbolObject symbol = new SymbolObject("local", type.toString(), id.toString());
        addSymbol(symbol);
    }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asig_galleta",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // asig_galleta ::= local_arbol tipos_noel identificador_persona asignar_entrega expresion_regalo 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if(getTipoVar(id.toString(), false) != ExpType.ERROR) {
//        System.out.println("Error semantico en la linea " + lex.getLine() + " columna " + lex.getColumn() + " la variable " + id.toString() + " ya ha sido declarada");
    }
    else {
        Expresion a = (Expresion)exp;
        if(a.getTipo() != Expresion.ExpType(type.toString())) {
//            System.out.println("Error semantico en la linea " + lex.getLine() + " columna " + lex.getColumn() + " el tipo de la expresion " + a.getTipo().toString() + " no coincide con el tipo de la variable " + type.toString());
        }
        else {
            SymbolObject symbol = new SymbolObject("local", type.toString(), id.toString());
            addSymbol(symbol);
        }
    }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asig_galleta",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // asig_galleta ::= identificador_persona asignar_entrega expresion_regalo 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Expresion a = (Expresion)exp;
    ExpType tipo = getTipoVar(id.toString(), true);
    if(tipo != a.getTipo()) {
//        System.out.println("Error semantico en la linea " + lex.getLine() + " columna " + lex.getColumn() + " el tipo de la expresion " + a.getTipo().toString() + " no coincide con el tipo de la variable " + tipo.toString());
    }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asig_galleta",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // asig_galleta ::= local_arbol tipos_noel identificador_persona cuadrado_abre_empaque l_int_noel cuadrado_cierra_empaque 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    if(type.toString() != "int" && type.toString() != "char") {
//        System.out.println("Error semantico en la linea " + lex.getLine() + " columna " + lex.getColumn() + " el tipo de la variable " + type.toString() + " no es valido");
    }
    else {
        int size = Integer.parseInt(lit.toString());
        if(size <= 0) {
//            System.out.println("Error semantico en la linea " + lex.getLine() + " columna " + lex.getColumn() + " el tamano del arreglo " + size + " no es valido");
        }
        else {
            SymbolObject symbol = new SymbolObject("local", type.toString() + "[]", id.toString());
            addSymbol(symbol);
        }
    }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asig_galleta",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // asig_galleta ::= local_arbol tipos_noel identificador_persona cuadrado_abre_empaque l_int_noel cuadrado_cierra_empaque asignar_entrega array_elementos_destinos 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object arr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if(type.toString() != "int" && type.toString() != "char") {
//        System.out.println("Error semantico en la linea " + lex.getLine() + " columna " + lex.getColumn() + " el tipo de la variable " + type.toString() + " no es valido");
    }
    else {
        Expresion a = (Expresion)arr;
        if(a.getTipo() == ExpType.ERROR){
//            System.out.println("Error semantico en la linea " + lex.getLine() + " columna " + lex.getColumn() + " el tipo de la expresion " + a.getTipo().toString() + " no coincide con el tipo del arreglo " + type.toString());
        }
        else{
            ExpType tipo = Expresion.ExpType(type.toString() + "[]");
            if(a.getTipo() != tipo) {
//                System.out.println("Error semantico en la linea " + lex.getLine() + " columna " + lex.getColumn() + " el tipo de la expresion " + arr.getTipo().toString() + " no coincide con el tipo del arreglo " + tipo.toString());
            }
            else {
                var temp = (ArrayList<Expresion>)a.getValor();
                int size = Integer.parseInt(lit.toString());
                if(size != temp.size()) {
//                    System.out.println("Error semantico en la linea " + lex.getLine() + " columna " + lex.getColumn() + " el tamano del arreglo " + size + " no coincide con el tamano del arreglo" + temp.size());
                }
                else {
                    if(getTipoVar(id.toString(), false) != ExpType.ERROR) {
//                        System.out.println("Error semantico en la linea " + lex.getLine() + " columna " + lex.getColumn() + " la variable " + id.toString() + " ya ha sido declarada");
                    }
                    else {
                        SymbolObject symbol = new SymbolObject("local", type.toString() + "[]", id.toString());
                        addSymbol(symbol);
                    }
                }
            }
        }
    }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asig_galleta",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // asig_galleta ::= array_lista_viajes asignar_entrega expresion_regalo 
            {
              Object RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object arr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Expresion a = (Expresion)arr;
    Expresion b = (Expresion)exp;
    ExpType tipoA = a.getTipo();
    ExpType tipoB = b.getTipo();
    if(tipoA != tipoB){
//        System.out.println("Error semantico en la linea " + lex.getLine() + " columna " + lex.getColumn() + " el tipo de la expresion " + tipoB.toString() + " no coincide con el tipo del arreglo " + tipoA.toString());
    }
    else {
        if(tipoA == ExpType.ERROR) {
//            System.out.println("Error semantico en la linea " + lex.getLine() + " columna " + lex.getColumn() + " el tipo de la expresion no es valido");
        }
    }

    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asig_galleta",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // argumento_rompope ::= expresion_regalo 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
    ArrayList<Expresion> temp = new ArrayList<>();
    temp.add((Expresion)exp); 
    RESULT = temp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumento_rompope",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // argumento_rompope ::= argumento_rompope separador_luces expresion_regalo 
            {
              Object RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object arg = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
    ArrayList<Expresion> temp = (ArrayList<Expresion>)arg; 
    temp.add((Expresion)exp); 
    RESULT = temp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumento_rompope",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // parametro_pascua ::= tipos_noel identificador_persona 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 SymbolObject symbol = new SymbolObject("param", type.toString(), id.toString());
                                                                 addSymbol(symbol);
                                                               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro_pascua",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // parametros_pascua ::= parametro_pascua 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_pascua",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // parametros_pascua ::= parametro_pascua separador_luces parametro_pascua 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_pascua",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // funcion_bolsanavidena ::= funcion_gnomo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_bolsanavidena",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // funcion_bolsanavidena ::= funcion_bolsanavidena funcion_gnomo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_bolsanavidena",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // funcion_gnomo ::= definir_funcion_leche bloque_muneco 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_gnomo",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // funcion_gnomo ::= defininir_funcion_galletas bloque_muneco 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_gnomo",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // definir_funcion_leche ::= tipos_noel function_regalo main_fiestas redondo_abre_cuento redondo_cierra_cuento 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int mainleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object main = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 addHash("main");
                                                                                                                               SymbolObject symbol = new SymbolObject("function", type.toString(), "main");
                                                                                                                               addSymbol(symbol);
                                                                                                                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("definir_funcion_leche",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // definir_funcion_leche ::= tipos_noel function_regalo main_fiestas redondo_abre_cuento parametros_pascua redondo_cierra_cuento 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int mainleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object main = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 addHash("main");
                                                                                                                                                 SymbolObject symbol = new SymbolObject("function", type.toString(), "main");
                                                                                                                                                 addSymbol(symbol);
                                                                                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("definir_funcion_leche",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // defininir_funcion_galletas ::= tipos_noel function_regalo identificador_persona redondo_abre_cuento redondo_cierra_cuento 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 addHash(id.toString());
                                                                                                                                           SymbolObject symbol = new SymbolObject("function", type.toString(), id.toString());
                                                                                                                                           addSymbol(symbol);
                                                                                                                                         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("defininir_funcion_galletas",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // defininir_funcion_galletas ::= tipos_noel function_regalo identificador_persona redondo_abre_cuento parametros_pascua redondo_cierra_cuento 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 addHash(id.toString());
                                                                                                                                                             SymbolObject symbol = new SymbolObject("function", type.toString(), id.toString());
                                                                                                                                                             addSymbol(symbol);
                                                                                                                                                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("defininir_funcion_galletas",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // llamada_funciones_nieve ::= main_fiestas redondo_abre_cuento redondo_cierra_cuento 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamada_funciones_nieve",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // llamada_funciones_nieve ::= main_fiestas redondo_abre_cuento argumento_rompope redondo_cierra_cuento 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamada_funciones_nieve",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // llamada_funciones_nieve ::= identificador_persona redondo_abre_cuento redondo_cierra_cuento 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamada_funciones_nieve",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // llamada_funciones_nieve ::= identificador_persona redondo_abre_cuento argumento_rompope redondo_cierra_cuento 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamada_funciones_nieve",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // llamada_funciones_nieve ::= print_narra redondo_abre_cuento argumento_rompope redondo_cierra_cuento 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamada_funciones_nieve",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // llamada_funciones_nieve ::= read_escucha redondo_abre_cuento redondo_cierra_cuento 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamada_funciones_nieve",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // llamada_funciones_nieve ::= read_escucha redondo_abre_cuento expresion_regalo redondo_cierra_cuento 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamada_funciones_nieve",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // for_fabrica ::= for_envuelve redondo_abre_cuento asig_galleta fin_regalo expresion_regalo fin_regalo expresion_regalo fin_regalo redondo_cierra_cuento bloque_muneco 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		
    Expresion a = (Expresion)exp;
    ExpType tipo = a.getTipo();
    if(tipo != ExpType.BOOL) {
//        System.out.println("Error semantico en la linea " + lex.getLine() + " columna " + lex.getColumn() + " el tipo de la expresion " + tipo.toString() + " no es valido porque no es booleano");
    }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_fabrica",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // do_regalos ::= do_hace bloque_muneco until_revisa redondo_abre_cuento expresion_regalo redondo_cierra_cuento 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    Expresion a = (Expresion)exp;
    ExpType tipo = a.getTipo();
    if(tipo != ExpType.BOOL) {
//        System.out.println("Error semantico en la linea " + lex.getLine() + " columna " + lex.getColumn() + " el tipo de la expresion " + tipo.toString() + " no es valido porque no es booleano");
    }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("do_regalos",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // if_tamal ::= if_elfo redondo_abre_cuento expresion_regalo redondo_cierra_cuento bloque_muneco 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_tamal",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // if_tamal ::= if_elfo redondo_abre_cuento expresion_regalo redondo_cierra_cuento bloque_muneco elif_pavo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_tamal",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // if_tamal ::= if_elfo redondo_abre_cuento expresion_regalo redondo_cierra_cuento bloque_muneco elif_pavo else_chanchito 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_tamal",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // elif_pavo ::= elif_hada redondo_abre_cuento expresion_regalo redondo_cierra_cuento bloque_muneco 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elif_pavo",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // elif_pavo ::= elif_hada redondo_abre_cuento expresion_regalo redondo_cierra_cuento bloque_muneco elif_pavo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elif_pavo",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // else_chanchito ::= else_duende bloque_muneco 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_chanchito",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // bloque_muneco ::= llave_abre_regalo lineas_calabaza llave_cierra_regalo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_muneco",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // bloque_muneco ::= llave_abre_regalo llave_cierra_regalo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_muneco",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // lineas_calabaza ::= linea_bola_nieve 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lineas_calabaza",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // lineas_calabaza ::= lineas_calabaza linea_bola_nieve 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lineas_calabaza",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // linea_bola_nieve ::= asig_galleta fin_regalo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("linea_bola_nieve",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // linea_bola_nieve ::= expresion_regalo fin_regalo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("linea_bola_nieve",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // linea_bola_nieve ::= return_confite fin_regalo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("linea_bola_nieve",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // linea_bola_nieve ::= break_corta fin_regalo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("linea_bola_nieve",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // linea_bola_nieve ::= if_tamal fin_regalo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("linea_bola_nieve",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // linea_bola_nieve ::= do_regalos fin_regalo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("linea_bola_nieve",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // linea_bola_nieve ::= for_fabrica fin_regalo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("linea_bola_nieve",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // return_confite ::= return_envia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_confite",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // return_confite ::= return_envia expresion_regalo 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    ExpType tipo = ((Expresion)exp).getTipo();
    ExpType tipoFuncion = funcionActual().getRetorno();
    if(tipo != tipoFuncion) {
//        System.out.println("Error semantico en la linea " + lex.getLine() + " columna " + lex.getColumn() + "el tipo de retorno de la funcion " + tipoFuncion.toString() + " no coincide con el tipo de la expresion" + tipo.toString());
    }
    else{
        funcionActual().setRetornaAlgo(true);
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_confite",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
