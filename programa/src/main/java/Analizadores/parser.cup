package Analizadores;
import java_cup.runtime.*;

action code {:

public void hola_mundo() {
    System.out.println("Hola Mundo");
}

:}


// Crea el parser y lo conecta al scanner (JFlex con expresiones regulares)
parser code {:
    Lexer lex;

    public Parser(Lexer lex) {
        this.lex=lex;
        this.symbolFactory = new DefaultSymbolFactory();
    }

:}

// Escanear los tokens
scan with {: return lex.next_token(); :};
init with {: :}

// Definicion de termminales (Tokens)

// Operadores arimeticos binarios
terminal suma_rudolph, resta_dasher, division_dancer;
terminal multiplicacion_prancer, modulo_vixen, potencia_comet;

// Operadores aritmeticos unarios
terminal aumentar_quien, disminuir_grinch;

// Operadores relacionales
terminal igual_twinkle, diferente_sparkle, mayor_jingle;
terminal mayor_igual_blinky, menor_fizz, menor_igual_mistle;

// Expresiones logicas
terminal and_melchor, or_gaspar, not_baltasar;

// Identificador
terminal identificador_persona;



// Tipos de datos
terminal int_noel, float_nicolas, bool_kringle, string_sinterklaas;
terminal char_pascuero, null_joulupukki, struct_colacho, void_painatal;

// Literales
terminal l_string_sinterklaas, l_char_pascuero;
terminal l_int_noel, l_float_nicolas, l_true_olentzero, l_false_jesus;

// Parentesis redondos
terminal redondo_abre_cuento, redondo_cierra_cuento;

// Parentesis cuadrados
terminal cuadrado_abre_empaque, cuadrado_cierra_empaque;

// Llaves
terminal llave_abre_regalo, llave_cierra_regalo;

// Estructura de control
terminal if_elfo, elif_hada, else_duende, for_envuelve;
terminal do_hace, until_revisa, return_envia, break_corta;
terminal while_repite, switch_gorro, case_estrella, default_navidad, in_envuelto;

// Print y read
terminal print_narra, read_escucha;

// Fin de expresion
terminal fin_regalo;

// Asignar
terminal asignar_entrega;

// Separador
terminal separador_luces;

// Main
terminal main_fiestas;

// Error
terminal err_malcriado;

// Estructura gramatical para tarea 1

// Function
terminal function_regalo;

// Variable
terminal local_arbol;

//Simbolo inicial
non terminal navidad;

/*
|-----------------------------------|
|        //no terminales            |
|-----------------------------------|
*/

// Regla inicial

non terminal navidad;

// Tipos
non terminal tipos_noel, literales_noel;

// Arreglos
non terminal array_lista_viajes, array_elementos_destinos;

// Funciones
non terminal funcion_bolsanavidena;

// Expresiones arimeticas
non terminal aritmeticas_regaloprin;

// Expresiones relacionales;
non terminal relacionales_regalocomprado;

// Expresiones logicas
non terminal logicas_regalomanual;

// Asignacion
non terminal asig_galleta;

// Parametros y funciones
non terminal parametros_pascua, definir_funcion_leche, defininir_funcion_galletas;

// Llamada de funciones
non terminal llamada_funciones_nieve;

// Ciclos
non terminal for_fabrica, do_regalos, while_repartiendo;

// Condicionales
non terminal if_tamal, elif_pavo, else_chanchito, switch_estrellita, case_adorno;











// Definiciones para precedencia y asociatividad
precedece left suma_rudolph, resta_dasher;
precedence left division_dancer, multiplicacion_prancer;
precedence left potencia_comet, modulo_vixen;
precedence left disminuir_grinch, aumentar_quien;
precedence left igual_twinkle, menor_fizz, mayor_jingle, mayor_igual_blinky;
precedence left menor_igual_mistle, diferente_sparkle;
precedence left and_melchor;
precedence left or_gaspar;
precedence left not_baltasar;

start with navidad;

navidad ::= {: hola_mundo(); :} identificador_persona;

// Tipos y literales
tipos_noel ::= int_noel | float_nicolas | bool_kringle | string_sinterklaas terminal int_noel, float_nicolas, bool_kringle, string_sinterklaas | char_pascuero;
literales_noel ::= l_string_sinterklaas | l_char_pascuero | l_int_noel | l_float_nicolas | l_true_olentzero | l_false_jesus;

// Arreglos
array_lista_viajes ::= identificador_persona cuadrado_abre_empaque expresion_regalo cuadrado_cierra_empaque; // x[3]
array_elementos_destinos ::= llave_abre_regalo parametros_pascua llave_cierra_regalo; {3, 4, 5, 1}

// Expresion
expresion_regalo ::= literales_noel | identificador_persona | //falta texto

// Operaciones arimeticas
aritmeticas_regaloprin ::= expresion_regalo suma_rudolph expresion_regalo | // x + y
expresion_regalo resta_dasher expresion_regalo | // x - y
expresion_regalo division_dancer expresion_regalo | // x / y
expresion_regalo multiplicacion_prancer expresion_regalo | // x * y
expresion_regalo modulo_vixen expresion_regalo | // x ~ y
expresion_regalo potencia_comet expresion_regalo | // x ** y
aumentar_quien expresion_regalo | // ++x
disminuir_grinch expresion_regalo | // --x
aumentar_quien array_lista_viajes | // ++x[1]
disminuir_grinch array_lista_viajes; // --x[3]


// Operaciones relacionales
relacionales_regalocomprado ::= expresion_regalo igual_twinkle expresion_regalo | // x == y
expresion_regalo diferente_sparkle expresion_regalo | // x != y
expresion_regalo mayor_jingle expresion_regalo | // x > y
expresion_regalo mayor_igual_blinky expresion_regalo | // x >= y
expresion_regalo menor_fizz expresion_regalo | // x < y
expresion_regalo menor_igual_mistle expresion_regalo; // x =< y

// Operaciones logicas
logicas_regalomanual ::= expresion_regalo and_melchor expresion_regalo | // x ^ y
expresion_regalo or_gaspar expresion_regalo | // x # y
not_baltasar expresion_regalo; // !x

// Asignacion de variables
asig_galleta ::= local_arbol tipos_noel identificador_persona | // local int x
local_arbol tipos_noel identificador_persona asignar_entrega expresion_regalo | // local int x <= 5
identificador_persona asignar_entrega expresion_regalo | // x <= 5
local_arbol tipos_noel array_lista_viajes | // local int x[5]
local_arbol tipos_noel array_lista_viajes asignar_entrega array_elementos_destinos | // local int x[5] <= {3, 4, 5, 1, 2}
identificador_persona array_lista_viajes asignar_entrega expresion_regalo;

// Parametros y funciones (leche main, galletas otras)
parametros_pascua ::= expresion_regalo | expresion_regalo separador_luces parametros_pascua; // 4, 5, 1

definir_funcion_leche ::= tipos_noel function_regalo main_fiestas redondo_abre_cuento redondo_cierra_cuento | // int func main ()
                          tipos_noel function_regalo main_fiestas redondo_abre_cuento parametros_pascua redondo_cierra_cuento; // int func main (3, 4) 

defininir_funcion_galletas ::= tipos_noel function_regalo identificador_persona redondo_abre_cuento redondo_cierra_cuento | // int func myfunc ()
                               tipos_noel function_regalo identificador_persona redondo_abre_cuento parametros_pascua redondo_cierra_cuento; // int func myfunc (3, 4)

// Llamada de funciones (main, otras, read, print)
llamada_funciones_nieve ::= main_fiestas redondo_abre_cuento redondo_cierra_cuento | // main sin parametros
                            main_fiestas redondo_abre_cuento parametros_pascua redondo_cierra_cuento | // main con parametros
                            identificador_persona redondo_abre_cuento redondo_cierra_cuento | // funcion sin parametros
                            identificador_persona redondo_abre_cuento parametros_pascua redondo_cierra_cuento | // funcion con parametros
                            print_narra redondo_abre_cuento parametros_pascua redondo_cierra_cuento | print(abc)
                            read_escucha redondo_abre_cuento redondo_cierra_cuento | read()
                            read_escucha redondo_abre_cuento expresion_regalo redondo_cierra_cuento | read(xyz)



// Ciclos (for. do until, while)

// for = for (local int x <= 0| i | j) {}

for_fabrica ::= for_envuelve redondo_abre_cuento asig_galleta fin_regalo expresion_regalo fin_regalo expresion_regalo fin_regalo redondo_cierra_cuento bloque_muneco;

// do until = do {} until (x)

do_regalos ::= do_hace bloque_muneco until_revisa redondo_abre_cuento expresion_regalo redondo_cierra_cuento;

// while = while () {}

while_repartiendo ::= while_repite redondo_abre_cuento expresion_regalo redondo_cierra_cuento bloque_muneco; 

// Condicionales (if, else, elif, switch, case)

if_tamal ::= if_elfo redondo_abre_cuento expresion_regalo redondo_cierra_cuento bloque_muneco | // if (x) {}
             if_elfo redondo_abre_cuento expresion_regalo redondo_cierra_cuento bloque_muneco else_chanchito | // if (x) {} else {}
             if_elfo redondo_abre_cuento expresion_regalo redondo_cierra_cuento bloque_muneco elif_pavo | if (x) {} elif (y) {} ...
             if_elfo redondo_abre_cuento expresion_regalo redondo_cierra_cuento bloque_muneco elif_pavo else_chanchito; if (x) {} elif (y) {} else {} 

elif_pavo ::= elif_hada redondo_abre_cuento expresion_regalo redondo_cierra_cuento bloque_muneco | // elif (x) {}
              elif_hada redondo_abre_cuento expresion_regalo redondo_cierra_cuento bloque_muneco elif_pavo; // elif (x) {} elif (y) {}...

else_chanchito ::= else_duende bloque_muneco;

switch_estrellita ::= switch_gorro redondo_abre_cuento expresion_regalo redondo_cierra_cuento bloque_muneco; // switch () {}

case_adorno ::= case_estrella expresion_regalo; // case a

// Bloques de codigo

// 
