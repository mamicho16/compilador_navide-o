package Analizadores;
import Programa.HTMLTable;
import java_cup.runtime.*;
import java.util.*;

action code {:

public void hola_mundo() {
    System.out.println("Hola Mundo");
}

HashMap<String, ArrayList<SymbolObject>> tablasSimbolos = new HashMap<String, ArrayList<SymbolObject>>();
String hash = "";

public void createSymbolTable() {
    ArrayList<String[]> rows = new ArrayList<String[]>();

    for (String key: tablasSimbolos.keySet()) {
        for (SymbolObject val: tablasSimbolos.get(key)) {
            String[] row = new String[]{key, val.getTipoEntrada(), val.getNombre(), val.getTipoDato()};
            rows.add(row);
        }
    }
    // Instancia la clase para crear la tabla de simbolos
    HTMLTable tableGenerator = new HTMLTable();
    // Crea la tabla con los resultados
    String table = tableGenerator.createSymTable(rows);
    // Escribe el archivo HTML
    String outputFile = "src/main/java/Programa/tablaSim.html";
    tableGenerator.createHTMLFile(table, outputFile);
    System.out.println("Tabla de Simbolos creada en: " + outputFile);

}

public void printSymbolTable() {
    
    for (String key: tablasSimbolos.keySet()) {
        System.out.println("Tabla de simbolos: " + key);
        System.out.println("Valores: ");
        for (SymbolObject val: tablasSimbolos.get(key)) {
            System.out.println(val.toString());
        }
    }
}


public void addHash(String newHash) {
    hash = newHash;
    tablasSimbolos.put(newHash, new ArrayList<SymbolObject>());

}
public void addSymbol(SymbolObject symbol) {
    tablasSimbolos.get(hash).add(symbol);
}
:}


// Crea el parser y lo conecta al scanner (JFlex con expresiones regulares)
parser code {:
    Lexer lex;

    public Parser(Lexer lex) {
        this.lex=lex;
        this.symbolFactory = new DefaultSymbolFactory();
    }
    
    public void syntax_error(Symbol token) {
        if (token.value == null) {
            return;
        }
        System.out.println("Error de sintaxis en la linea " + token.left + " columna " + token.right + ": " + token.value);
        System.out.println("Continuando con el parsing");
    }

    public void unrecovered_syntax_error(Symbol token) throws java.lang.Exception {
        throw new Exception("Error de sintaxis irrecuperable en la linea " + token.left + " columna " + token.right + ": " + token.value);
    }
:}

// Escanear los tokens
scan with {: return lex.next_token(); :};
init with {: :};

// Definicion de termminales (Tokens)

// Operadores arimeticos binarios
terminal suma_rudolph, resta_dasher, division_dancer;
terminal multiplicacion_prancer, modulo_vixen, potencia_comet;

// Operadores aritmeticos unarios
terminal aumentar_quien, disminuir_grinch;

// Operadores relacionales
terminal igual_twinkle, diferente_sparkle, mayor_jingle;
terminal mayor_igual_blinky, menor_fizz, menor_igual_mistle;

// Expresiones logicas
terminal and_melchor, or_gaspar, not_baltasar;

// Identificador
terminal identificador_persona;

// Funciones
terminal function_regalo;

// Tipos de datos
terminal int_noel, float_nicolas, bool_kringle, string_sinterklaas, char_pascuero;

// Literales
terminal l_string_sinterklaas, l_char_pascuero;
terminal l_int_noel, l_float_nicolas, l_true_olentzero, l_false_jesus;

// Parentesis redondos
terminal redondo_abre_cuento, redondo_cierra_cuento;

// Parentesis cuadrados
terminal cuadrado_abre_empaque, cuadrado_cierra_empaque;

// Llaves
terminal llave_abre_regalo, llave_cierra_regalo;

// Estructura de control
terminal if_elfo, elif_hada, else_duende, for_envuelve;
terminal do_hace, until_revisa, return_envia, break_corta;

// Print y read
terminal print_narra, read_escucha;

// Fin de expresion
terminal fin_regalo;

// Asignar
terminal asignar_entrega;

// Separador
terminal separador_luces;

// Main
terminal main_fiestas;

// Error
terminal err_malcriado;

// Estructura gramatical para tarea 1

// Variable
terminal local_arbol;

//Simbolo inicial
non terminal navidad;

/*
|-----------------------------------|
|        //no terminales            |
|-----------------------------------|
*/

// Tipos
non terminal tipos_noel, literales_noel;

// Arreglos
non terminal array_lista_viajes, array_elementos_destinos;  

// Expresion
non terminal expresion_regalo;

// Expresiones arimeticas
non terminal aritmeticas_regaloprin;

// Expresiones relacionales;
non terminal relacionales_regalocomprado;

// Expresiones logicas
non terminal logicas_regalomanual;

// Asignacion
non terminal asig_galleta;

// Parametros y funciones
non terminal argumento_rompope, parametro_pascua, parametros_pascua, funcion_bolsanavidena, funcion_gnomo, definir_funcion_leche, defininir_funcion_galletas;

// Llamada de funciones
non terminal llamada_funciones_nieve;

// Ciclos
non terminal for_fabrica, do_regalos;

// Condicionales
non terminal if_tamal, elif_pavo, else_chanchito;

// Bloque de codigo y return
non terminal bloque_muneco, lineas_calabaza, linea_bola_nieve, return_confite;


// Definiciones para precedencia y asociatividad
precedence left suma_rudolph, resta_dasher;
precedence left division_dancer, multiplicacion_prancer;
precedence left potencia_comet, modulo_vixen;
precedence left disminuir_grinch, aumentar_quien;
precedence left igual_twinkle, menor_fizz, mayor_jingle, mayor_igual_blinky;
precedence left menor_igual_mistle, diferente_sparkle;
precedence left and_melchor;
precedence left or_gaspar;
precedence left not_baltasar;

start with navidad;

navidad ::= funcion_bolsanavidena {: createSymbolTable();
                                     printSymbolTable();
                                   :};

// Tipos y literales
tipos_noel ::= int_noel:type {: RESULT = type; :} | float_nicolas:type {: RESULT = type; :} | bool_kringle:type {: RESULT = type; :} | string_sinterklaas:type {: RESULT = type; :} | char_pascuero:type {: RESULT = type; :};
literales_noel ::= l_string_sinterklaas:literal {: RESULT = literal; :} | l_char_pascuero:literal {: RESULT = literal; :} | l_int_noel:literal {: RESULT = literal; :} | l_float_nicolas:literal {: RESULT = literal; :} | l_true_olentzero:literal {: RESULT = literal; :} | l_false_jesus:literal {: RESULT = literal; :}; 

// Arreglos
array_lista_viajes ::= identificador_persona:id cuadrado_abre_empaque expresion_regalo cuadrado_cierra_empaque {: RESULT = id.toString(); :}; // x[3]
array_elementos_destinos ::= llave_abre_regalo argumento_rompope llave_cierra_regalo; // {3, 4, 5, 1}

// Expresion
expresion_regalo ::= literales_noel | identificador_persona | 
redondo_abre_cuento expresion_regalo redondo_cierra_cuento |
 logicas_regalomanual | aritmeticas_regaloprin | 
 relacionales_regalocomprado | llamada_funciones_nieve | array_lista_viajes;

// Operaciones aritmeticas
aritmeticas_regaloprin ::= expresion_regalo suma_rudolph expresion_regalo | // x + y
expresion_regalo resta_dasher expresion_regalo | // x - y
expresion_regalo division_dancer expresion_regalo | // x / y
expresion_regalo multiplicacion_prancer expresion_regalo | // x * y
expresion_regalo modulo_vixen expresion_regalo | // x ~ y
expresion_regalo potencia_comet expresion_regalo | // x ** y
aumentar_quien expresion_regalo | // ++x
disminuir_grinch expresion_regalo; // --x



// Operaciones relacionales
relacionales_regalocomprado ::= expresion_regalo igual_twinkle expresion_regalo | // x == y
expresion_regalo diferente_sparkle expresion_regalo | // x != y
expresion_regalo mayor_jingle expresion_regalo | // x > y
expresion_regalo mayor_igual_blinky expresion_regalo | // x >= y
expresion_regalo menor_fizz expresion_regalo | // x < y
expresion_regalo menor_igual_mistle expresion_regalo; // x =< y

// Operaciones logicas
logicas_regalomanual ::= expresion_regalo and_melchor expresion_regalo | // x ^ y
expresion_regalo or_gaspar expresion_regalo | // x # y
not_baltasar expresion_regalo; // !x

// Asignacion de variables
asig_galleta ::= local_arbol tipos_noel:type identificador_persona:id {: SymbolObject symbol = new SymbolObject("local", type.toString(), id.toString());
                                                                               addSymbol(symbol);
                                                                             :} | // local int x
local_arbol tipos_noel:type identificador_persona:id asignar_entrega expresion_regalo {: SymbolObject symbol = new SymbolObject("local", type.toString(), id.toString());
                                                                                               addSymbol(symbol);
                                                                                             :} | // local int x <= 5
identificador_persona asignar_entrega expresion_regalo | // x <= 5
local_arbol tipos_noel:type array_lista_viajes:id  {: SymbolObject symbol = new SymbolObject("local", type.toString() + "[]", id.toString());
                                                            addSymbol(symbol);
                                                          :}| // local int x[5]   
local_arbol tipos_noel:type array_lista_viajes:id asignar_entrega array_elementos_destinos {: SymbolObject symbol = new SymbolObject("local", type.toString() + "[]", id.toString());
                                                                                                    addSymbol(symbol);
                                                                                                  :}| // local int x[5] <= {3, 4, 5, 1, 2}
identificador_persona array_lista_viajes asignar_entrega expresion_regalo; // x[2] <= 43

// Parametros y funciones (leche main, galletas otras)

argumento_rompope::= expresion_regalo | argumento_rompope separador_luces expresion_regalo;

parametro_pascua ::= tipos_noel:type identificador_persona:id {: SymbolObject symbol = new SymbolObject("param", type.toString(), id.toString());
                                                                 addSymbol(symbol);
                                                               :};
parametros_pascua ::= parametro_pascua | parametro_pascua separador_luces parametro_pascua; // 4, 5, 1

funcion_bolsanavidena ::= funcion_gnomo | funcion_bolsanavidena funcion_gnomo; // funciones del programa

funcion_gnomo ::= definir_funcion_leche bloque_muneco | defininir_funcion_galletas bloque_muneco; // funciones con bloque de codigo

// Aqui se definen los hash segun la funcion
definir_funcion_leche ::= tipos_noel:type function_regalo main_fiestas:main redondo_abre_cuento redondo_cierra_cuento  {: addHash("main");
                                                                                                                               SymbolObject symbol = new SymbolObject("function", type.toString(), "main");
                                                                                                                               addSymbol(symbol);
                                                                                                                             :}| // int func main ()

                          tipos_noel:type function_regalo main_fiestas:main redondo_abre_cuento parametros_pascua redondo_cierra_cuento  {: addHash("main");
                                                                                                                                                 SymbolObject symbol = new SymbolObject("function", type.toString(), "main");
                                                                                                                                                 addSymbol(symbol);
                                                                                                                                                :}; // int func main (3, 4) 

defininir_funcion_galletas ::= tipos_noel:type function_regalo identificador_persona:id redondo_abre_cuento redondo_cierra_cuento  {: addHash(id.toString());
                                                                                                                                           SymbolObject symbol = new SymbolObject("function", type.toString(), id.toString());
                                                                                                                                           addSymbol(symbol);
                                                                                                                                         :} | // int func myfunc ()
                               tipos_noel:type function_regalo identificador_persona:id redondo_abre_cuento parametros_pascua redondo_cierra_cuento  {: addHash(id.toString());
                                                                                                                                                             SymbolObject symbol = new SymbolObject("function", type.toString(), id.toString());
                                                                                                                                                             addSymbol(symbol);
                                                                                                                                                           :}; // int func myfunc (3, 4)

// Llamada de funciones (main, otras, read, print)
llamada_funciones_nieve ::= main_fiestas redondo_abre_cuento redondo_cierra_cuento | // main sin parametros
                            main_fiestas redondo_abre_cuento argumento_rompope redondo_cierra_cuento | // main con parametros
                            identificador_persona redondo_abre_cuento redondo_cierra_cuento | // funcion sin parametros
                            identificador_persona redondo_abre_cuento argumento_rompope redondo_cierra_cuento | // funcion con parametros
                            print_narra redondo_abre_cuento argumento_rompope redondo_cierra_cuento | //print(abc)
                            read_escucha redondo_abre_cuento redondo_cierra_cuento | //read()
                            read_escucha redondo_abre_cuento expresion_regalo redondo_cierra_cuento; //read(xyz)



// Ciclos (for. do until, while)

// for = for (local int x <= 0| i | j) {}

for_fabrica ::= for_envuelve redondo_abre_cuento asig_galleta fin_regalo expresion_regalo fin_regalo expresion_regalo fin_regalo redondo_cierra_cuento bloque_muneco;

// do until = do {} until (x)

do_regalos ::= do_hace bloque_muneco until_revisa redondo_abre_cuento expresion_regalo redondo_cierra_cuento;

// Condicionales (if, else, elif, switch, case)

if_tamal ::= if_elfo redondo_abre_cuento expresion_regalo redondo_cierra_cuento bloque_muneco | // if (x) {}
             if_elfo redondo_abre_cuento expresion_regalo redondo_cierra_cuento bloque_muneco else_chanchito | // if (x) {} else {}
             if_elfo redondo_abre_cuento expresion_regalo redondo_cierra_cuento bloque_muneco elif_pavo | // if (x) {} elif (y) {} ...
             if_elfo redondo_abre_cuento expresion_regalo redondo_cierra_cuento bloque_muneco elif_pavo else_chanchito; // if (x) {} elif (y) {} else {} 

elif_pavo ::= elif_hada redondo_abre_cuento expresion_regalo redondo_cierra_cuento bloque_muneco | // elif (x) {}
              elif_hada redondo_abre_cuento expresion_regalo redondo_cierra_cuento bloque_muneco elif_pavo; // elif (x) {} elif (y) {}...

else_chanchito ::= else_duende bloque_muneco;

// Bloques de codigo

bloque_muneco ::= llave_abre_regalo lineas_calabaza llave_cierra_regalo;

lineas_calabaza ::= linea_bola_nieve | lineas_calabaza linea_bola_nieve;

linea_bola_nieve ::= asig_galleta fin_regalo | 
expresion_regalo fin_regalo |
return_confite fin_regalo |
break_corta fin_regalo |
if_tamal |
do_regalos |
for_fabrica; //do, for, if

// Return

return_confite::= return_envia expresion_regalo; // return x

